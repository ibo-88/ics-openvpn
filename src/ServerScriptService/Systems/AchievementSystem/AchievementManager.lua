-- AchievementManager.lua
-- –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è Nexus Siege

local AchievementManager = {}
AchievementManager.__index = AchievementManager

-- –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProfileService = require(script.Parent.Parent.Data.ProfileService)

-- –°–æ—Å—Ç–æ—è–Ω–∏–µ
AchievementManager.achievements = {}
AchievementManager.playerProgress = {}
AchievementManager.achievementEvents = {}

function AchievementManager:Initialize()
    print("[AchievementManager] Initializing...")
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    self:InitializeAchievements()
    
    -- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    self:ConnectEvents()
    
    print("[AchievementManager] Initialized successfully!")
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function AchievementManager:InitializeAchievements()
    self.achievements = {
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É–±–∏–π—Å—Ç–≤–∞
        {
            id = "first_blood",
            name = "–ü–µ—Ä–≤–∞—è –ö—Ä–æ–≤—å",
            description = "–£–±–µ–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞",
            icon = "ü©∏",
            category = "Combat",
            requirement = {type = "kills", amount = 1},
            reward = {gold = 50, experience = 25}
        },
        {
            id = "warrior",
            name = "–í–æ–∏–Ω",
            description = "–£–±–µ–π—Ç–µ 100 –≤—Ä–∞–≥–æ–≤",
            icon = "‚öîÔ∏è",
            category = "Combat",
            requirement = {type = "kills", amount = 100},
            reward = {gold = 500, experience = 200}
        },
        {
            id = "slayer",
            name = "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å",
            description = "–£–±–µ–π—Ç–µ 1000 –≤—Ä–∞–≥–æ–≤",
            icon = "üó°Ô∏è",
            category = "Combat",
            requirement = {type = "kills", amount = 1000},
            reward = {gold = 2000, experience = 1000}
        },
        
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
        {
            id = "builder",
            name = "–°—Ç—Ä–æ–∏—Ç–µ–ª—å",
            description = "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–µ–Ω—É",
            icon = "üß±",
            category = "Building",
            requirement = {type = "structures_built", amount = 1},
            reward = {gold = 30, experience = 15}
        },
        {
            id = "architect",
            name = "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
            description = "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ 50 —Å—Ç—Ä—É–∫—Ç—É—Ä",
            icon = "üèóÔ∏è",
            category = "Building",
            requirement = {type = "structures_built", amount = 50},
            reward = {gold = 300, experience = 150}
        },
        {
            id = "fortress_master",
            name = "–ú–∞—Å—Ç–µ—Ä –ö—Ä–µ–ø–æ—Å—Ç–∏",
            description = "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ 200 —Å—Ç—Ä—É–∫—Ç—É—Ä",
            icon = "üè∞",
            category = "Building",
            requirement = {type = "structures_built", amount = 200},
            reward = {gold = 1000, experience = 500}
        },
        
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ—Å—É—Ä—Å—ã
        {
            id = "gatherer",
            name = "–°–æ–±–∏—Ä–∞—Ç–µ–ª—å",
            description = "–°–æ–±–µ—Ä–∏—Ç–µ 100 —Ä–µ—Å—É—Ä—Å–æ–≤",
            icon = "‚õèÔ∏è",
            category = "Resources",
            requirement = {type = "resources_gathered", amount = 100},
            reward = {gold = 40, experience = 20}
        },
        {
            id = "miner",
            name = "–®–∞—Ö—Ç–µ—Ä",
            description = "–°–æ–±–µ—Ä–∏—Ç–µ 1000 —Ä–µ—Å—É—Ä—Å–æ–≤",
            icon = "‚õèÔ∏è",
            category = "Resources",
            requirement = {type = "resources_gathered", amount = 1000},
            reward = {gold = 400, experience = 200}
        },
        {
            id = "resource_king",
            name = "–ö–æ—Ä–æ–ª—å –†–µ—Å—É—Ä—Å–æ–≤",
            description = "–°–æ–±–µ—Ä–∏—Ç–µ 10000 —Ä–µ—Å—É—Ä—Å–æ–≤",
            icon = "üëë",
            category = "Resources",
            requirement = {type = "resources_gathered", amount = 10000},
            reward = {gold = 2000, experience = 1000}
        },
        
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤–æ–ª–Ω—ã
        {
            id = "survivor",
            name = "–í—ã–∂–∏–≤—à–∏–π",
            description = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É",
            icon = "üåä",
            category = "Waves",
            requirement = {type = "waves_completed", amount = 1},
            reward = {gold = 100, experience = 50}
        },
        {
            id = "wave_master",
            name = "–ú–∞—Å—Ç–µ—Ä –í–æ–ª–Ω",
            description = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 –≤–æ–ª–Ω",
            icon = "üåä",
            category = "Waves",
            requirement = {type = "waves_completed", amount = 10},
            reward = {gold = 500, experience = 250}
        },
        {
            id = "wave_legend",
            name = "–õ–µ–≥–µ–Ω–¥–∞ –í–æ–ª–Ω",
            description = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 50 –≤–æ–ª–Ω",
            icon = "üåä",
            category = "Waves",
            requirement = {type = "waves_completed", amount = 50},
            reward = {gold = 2500, experience = 1250}
        },
        
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏
        {
            id = "novice",
            name = "–ù–æ–≤–∏—á–æ–∫",
            description = "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
            icon = "‚≠ê",
            category = "Levels",
            requirement = {type = "level", amount = 5},
            reward = {gold = 200, experience = 100}
        },
        {
            id = "veteran",
            name = "–í–µ—Ç–µ—Ä–∞–Ω",
            description = "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 20 —É—Ä–æ–≤–Ω—è",
            icon = "‚≠ê‚≠ê",
            category = "Levels",
            requirement = {type = "level", amount = 20},
            reward = {gold = 800, experience = 400}
        },
        {
            id = "master",
            name = "–ú–∞—Å—Ç–µ—Ä",
            description = "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —É—Ä–æ–≤–Ω—è",
            icon = "‚≠ê‚≠ê‚≠ê",
            category = "Levels",
            requirement = {type = "level", amount = 50},
            reward = {gold = 2000, experience = 1000}
        },
        
        -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        {
            id = "dedicated",
            name = "–ü—Ä–µ–¥–∞–Ω–Ω—ã–π",
            description = "–ò–≥—Ä–∞–π—Ç–µ 1 —á–∞—Å",
            icon = "‚è∞",
            category = "Time",
            requirement = {type = "play_time", amount = 3600},
            reward = {gold = 150, experience = 75}
        },
        {
            id = "hardcore",
            name = "–•–∞—Ä–¥–∫–æ—Ä",
            description = "–ò–≥—Ä–∞–π—Ç–µ 10 —á–∞—Å–æ–≤",
            icon = "‚è∞",
            category = "Time",
            requirement = {type = "play_time", amount = 36000},
            reward = {gold = 1000, experience = 500}
        },
        
        -- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        {
            id = "explorer",
            name = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            description = "–û—Ç–∫—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            icon = "üîç",
            category = "Secret",
            requirement = {type = "secret", amount = 1},
            reward = {gold = 500, experience = 250},
            secret = true
        }
    }
    
    print("[AchievementManager] Loaded " .. #self.achievements .. " achievements")
end

-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
function AchievementManager:ConnectEvents()
    -- –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    self.achievementEvents = {
        kills = function(player, amount)
            self:UpdateProgress(player, "kills", amount)
        end,
        structures_built = function(player, amount)
            self:UpdateProgress(player, "structures_built", amount)
        end,
        resources_gathered = function(player, amount)
            self:UpdateProgress(player, "resources_gathered", amount)
        end,
        waves_completed = function(player, amount)
            self:UpdateProgress(player, "waves_completed", amount)
        end,
        level = function(player, level)
            self:UpdateProgress(player, "level", level)
        end,
        play_time = function(player, time)
            self:UpdateProgress(player, "play_time", time)
        end
    }
end

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
function AchievementManager:UpdateProgress(player, progressType, amount)
    if not player then return end
    
    -- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData then return end
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if not playerData.achievements then
        playerData.achievements = {
            progress = {},
            unlocked = {}
        }
    end
    
    -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if not playerData.achievements.progress[progressType] then
        playerData.achievements.progress[progressType] = 0
    end
    
    playerData.achievements.progress[progressType] = playerData.achievements.progress[progressType] + amount
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    self:CheckAchievements(player, playerData)
    
    -- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    ProfileService:SavePlayerData(player, playerData)
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function AchievementManager:CheckAchievements(player, playerData)
    for _, achievement in ipairs(self.achievements) do
        -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if playerData.achievements.unlocked[achievement.id] then
            continue
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if self:CheckAchievementRequirement(player, achievement, playerData) then
            self:UnlockAchievement(player, achievement)
        end
    end
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:CheckAchievementRequirement(player, achievement, playerData)
    local requirement = achievement.requirement
    local progress = playerData.achievements.progress[requirement.type] or 0
    
    if requirement.type == "level" then
        return playerData.level >= requirement.amount
    elseif requirement.type == "play_time" then
        return playerData.statistics.playTime >= requirement.amount
    else
        return progress >= requirement.amount
    end
end

-- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:UnlockAchievement(player, achievement)
    print("[AchievementManager] Player", player.Name, "unlocked achievement:", achievement.name)
    
    -- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    local playerData = ProfileService:GetPlayerData(player)
    
    -- –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    playerData.achievements.unlocked[achievement.id] = {
        unlockedAt = tick(),
        progress = playerData.achievements.progress
    }
    
    -- –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
    if achievement.reward then
        if achievement.reward.gold then
            ProfileService:AddResources(player, {Gold = achievement.reward.gold})
        end
        
        if achievement.reward.experience then
            ProfileService:AddExperience(player, achievement.reward.experience)
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    ProfileService:SavePlayerData(player, playerData)
    
    -- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    self:NotifyAchievementUnlocked(player, achievement)
    
    -- –ó–∞–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è
    self:FireAchievementEvent(player, achievement)
end

-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:NotifyAchievementUnlocked(player, achievement)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local remote = ReplicatedStorage.Remotes.UI:FindFirstChild("ShowNotification")
    
    if remote then
        local message = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: " .. achievement.name
        remote:FireClient(player, message, "success", 5)
    end
end

-- –ó–∞–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:FireAchievementEvent(player, achievement)
    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    -- –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç.–¥.
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞
function AchievementManager:GetPlayerAchievements(player)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return {progress = {}, unlocked = {}}
    end
    
    return playerData.achievements
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function AchievementManager:GetAllAchievements()
    return self.achievements
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function AchievementManager:GetAchievementsByCategory(category)
    local categoryAchievements = {}
    
    for _, achievement in ipairs(self.achievements) do
        if achievement.category == category then
            table.insert(categoryAchievements, achievement)
        end
    end
    
    return categoryAchievements
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function AchievementManager:GetAchievementStatistics(player)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return {
            total = #self.achievements,
            unlocked = 0,
            progress = {},
            completionRate = 0
        }
    end
    
    local unlockedCount = 0
    for _ in pairs(playerData.achievements.unlocked) do
        unlockedCount = unlockedCount + 1
    end
    
    return {
        total = #self.achievements,
        unlocked = unlockedCount,
        progress = playerData.achievements.progress,
        completionRate = math.floor((unlockedCount / #self.achievements) * 100)
    }
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
function AchievementManager:IsAchievementUnlocked(player, achievementId)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return false
    end
    
    return playerData.achievements.unlocked[achievementId] ~= nil
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:GetAchievementProgress(player, achievementId)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return 0
    end
    
    -- –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    local achievement = nil
    for _, ach in ipairs(self.achievements) do
        if ach.id == achievementId then
            achievement = ach
            break
        end
    end
    
    if not achievement then
        return 0
    end
    
    local requirement = achievement.requirement
    local progress = playerData.achievements.progress[requirement.type] or 0
    
    if requirement.type == "level" then
        return math.min(playerData.level, requirement.amount)
    elseif requirement.type == "play_time" then
        return math.min(playerData.statistics.playTime, requirement.amount)
    else
        return math.min(progress, requirement.amount)
    end
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function AchievementManager:GetAchievementProgressPercent(player, achievementId)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return 0
    end
    
    -- –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    local achievement = nil
    for _, ach in ipairs(self.achievements) do
        if ach.id == achievementId then
            achievement = ach
            break
        end
    end
    
    if not achievement then
        return 0
    end
    
    local requirement = achievement.requirement
    local progress = playerData.achievements.progress[requirement.type] or 0
    
    if requirement.type == "level" then
        return math.min((playerData.level / requirement.amount) * 100, 100)
    elseif requirement.type == "play_time" then
        return math.min((playerData.statistics.playTime / requirement.amount) * 100, 100)
    else
        return math.min((progress / requirement.amount) * 100, 100)
    end
end

-- –°–±—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function AchievementManager:ResetPlayerAchievements(player)
    local playerData = ProfileService:GetPlayerData(player)
    if playerData then
        playerData.achievements = {
            progress = {},
            unlocked = {}
        }
        ProfileService:SavePlayerData(player, playerData)
        print("[AchievementManager] Reset achievements for", player.Name)
    end
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function AchievementManager:GetRecentAchievements(player, count)
    local playerData = ProfileService:GetPlayerData(player)
    if not playerData or not playerData.achievements then
        return {}
    end
    
    local recent = {}
    for achievementId, unlockData in pairs(playerData.achievements.unlocked) do
        table.insert(recent, {
            id = achievementId,
            unlockedAt = unlockData.unlockedAt
        })
    end
    
    -- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    table.sort(recent, function(a, b)
        return a.unlockedAt > b.unlockedAt
    end)
    
    -- –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö count –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    local result = {}
    for i = 1, math.min(count, #recent) do
        table.insert(result, recent[i])
    end
    
    return result
end

return setmetatable({}, AchievementManager)